<?xml version="1.0" ?>
<root xmlns:tal="http://xml.zope.org/namespaces/tal" 
  xmlns:metal="http://xml.zope.org/namespaces/metal" 
  xmlns:xf="http://www.w3.org/2002/xforms" 
  tal:define="permission python:here.Scripts.check.permission((here.Scripts.get.division_object(), here.Scripts.get.group_object()), ('DivisionAdmin', 'GroupAdmin', 'Manager'));">
  <data
    tal:content="structure python:here.models(method='xml')"/>
  <output>
    <content
      tal:define="group_object here/Scripts/get/group_object;
      joinable python:here.LocalScripts.get.usersCanJoinGroup(group_object.getId(),True);
      canJoin python:joinable[0];">
      
      <heading1>Create Members in Bulk</heading1>
      
      <tal:block tal:condition="canJoin">
        <paragraph>
          As a group administrator, you can create members in bulk,
          using a spreadsheet.
        </paragraph>
        
        
        <heading2>Step 1: Create the CSV File</heading2>
        
        <paragraph>To create the CSV (comma-separated value) file
          &#8212; which  will contain a list of all the members you wish
          to create  &#8212; download
          <link title="Sample Create Members in Bulk CSV File"
            url="sample_create_bulk_members.csv">the sample CSV file</link>
          and open it in a spreadsheet program, such as Microsoft Excel,
          NeoOffice Calc, or  OpenOffice Calc.</paragraph>
        
        <paragraph>
          The sample file contains three rows: the header, which you
          should not alter, and two example members, which you should
          replace.
          There are three columns for each member: first name, last name
          and email address.
          You can add as many, or as few, members to the spreadsheet as you
          like.
          However, <emph>all members</emph> need to have a
          first name, last name and email address.
        </paragraph>
        
        <paragraph>Expert administrators can also add extra columns,
          but this is not necessary.
          Experts should also note that you <emph>should not</emph>
          create more than 100 members at any one time.</paragraph>
        
        <heading2>Step 2: Select the CSV File</heading2>
        
        <paragraph>After saving the file in CSV format select the CSV
          file using the selector below.</paragraph>
        
        <xf:upload model="createusercsv" ref="csvfile" class="text">
        <xf:label>CSV File</xf:label>
        <xf:hint>Please enter the CSV filename</xf:hint>
        </xf:upload>
        
        <heading2>Step 3: Set the Columns</heading2>
        
        <paragraph>Now set the three column headers.
          If you did not add any headers in Step 1, then the first three
          column headers should be First Name, Last Name, and Email
          Address;
          the other columns should be set to Unused.</paragraph>
        
        <fieldset>
          <legend>Columns</legend>
          <tal:block tal:repeat="id python:list(here.UserProperties.objectIds())+['email','userId','nothing']">
            <xf:select1 appearance="minimal" 
              model="createusercsv" 
              tal:attributes="ref string:field${repeat/id/number}" 
              class="text">
              <xf:label>Column <span tal:replace="repeat/id/number"/> 
                contains</xf:label>
              <xf:hint>Which property does column 
              <span tal:replace="repeat/id/number"/> contain?</xf:hint>
              <xf:item tal:repeat="object python:list(here.UserProperties.objectValues())+[{'id': 'email', 'title': 'Email Address'}, {'id': 'userId', 'title': 'User ID'}, {'id': 'nothing', 'title': 'Unused'}]">
              <xf:label tal:content="object/title"/>
              <xf:value tal:content="object/getId | object/id"/>
              </xf:item>
            </xf:select1>
          </tal:block>
        </fieldset>
        
        <!--xf:select model="createusercsv" ref="addtogroup" class="checkbox">
        <xf:item><xf:value>yes</xf:value></xf:item>
        <xf:label>Add to group?</xf:label>
        <xf:hint>Add the newly created user to the group?</xf:hint>
        </xf:select-->
        
        <tal:block
          tal:condition="python:(user in here.Scripts.get.users_from_groups(['trusted_site_administrators'])) or ('Manager' in user.getRolesInContext(here.Scripts.get.group_object()))">
          <heading3>Step 3.1: Requiring Verification</heading3>
          
          <paragraph>Normally, members must verify themselves before they
            can participate in any online groups.
            As a&#8230; trusted&#8230; site administrator, you can
            immediately sign your members up, so they skip the
            verification step.</paragraph>
          
          <xf:select appearance="full" model="createusercsv" 
            ref="sendVerification" class="singlecheck">
          <xf:label>Require members to verify?</xf:label>
          <xf:hint></xf:hint>
          <xf:item>
            <xf:label></xf:label>
            <xf:value>1</xf:value>
            </xf:item>
          </xf:select>
          
        </tal:block>
        
        <heading2>Step 4: Create the Members</heading2>
        
        <paragraph>After checking the values in the above fields, create
          the members by clicking the button below.</paragraph>
        
        <paragraph>A message will be sent asking each member to verify, so
          he or she can start to participate in the online group.
          If there are any errors in the CSV file, you will be informed,
          and the members associated with each erroneous row will not be
          created.</paragraph>
        
      <xf:submit model="createusercsv" submission="next" class="button">
        <xf:label>Create Members</xf:label>
        <xf:hint>Create the new members</xf:hint>
        </xf:submit>
      </tal:block>
      <tal:block tal:condition="python:not canJoin">
        <paragraph>
          Normally, you could add users in bulk, to
          <span class="group" tal:content="group_object/title_or_id"/>,
          but <span tal:content="python:joinable[1][1].lower()"/>.
        </paragraph>
      </tal:block>
    </content>
  </output>
</root>
